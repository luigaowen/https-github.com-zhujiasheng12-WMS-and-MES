using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Linq;
using System.Web;

namespace WebApplication2.生产管理.工程部
{
    /// <summary>
    /// upload 的摘要说明
    /// </summary>
    public class uploadToolChartFile : IHttpHandler
    {

        public void ProcessRequest(HttpContext context)
        {
            var file = context.Request.Files;
            var processId = int.Parse(context.Request.Form[1]);
            using (JDJS_WMS_DB_USEREntities entities = new JDJS_WMS_DB_USEREntities())
            {
                using (System.Data.Entity.DbContextTransaction mytran = entities.Database.BeginTransaction())
                {
                    try
                    {
                        var row = entities.JDJS_WMS_Order_Process_Info_Table.Where(r => r.ID == processId).First();
                        var orderNumber = entities.JDJS_WMS_Order_Entry_Table.Where(r => r.Order_ID == row.OrderID).First().Order_Number;

                        var exten = Path.GetExtension(file[0].FileName);
                        var fileName = "T-" + orderNumber + "-P" + row.ProcessID + exten;
                        PathInfo pathInfo = new PathInfo();
                        var paths = Path.Combine(pathInfo.upLoadPath(), orderNumber, "刀具表", fileName);
                        var directoryPath= Path.Combine(pathInfo.upLoadPath(), orderNumber, "刀具表");
                        DirectoryInfo directory = new DirectoryInfo(directoryPath);
                        FileInfo[] files = directory.GetFiles();
                        foreach (var item in files)
                        {
                            item.Delete();
                        }

                        file[0].SaveAs(paths);
                        row.toolChartName = fileName;
                        entities.SaveChanges();



                        string FilePath = paths;
                        string path = Path.GetFileNameWithoutExtension(FilePath);
                        int ProcessID = 0;
                        string[] str = path.Split('-');
                        string OrderNum = str[1];
                        string Process = str[2].Substring(1);
                        List<int> ToolNum = new List<int>();
                        List<ToolInfo> toolInfos = new List<ToolInfo>();
                        string fileSuffix = System.IO.Path.GetExtension(FilePath);

                        if (fileSuffix == ".xls")
                        {
                            #region 
                            {
                                DataTable dt = getData(FilePath).Tables[0];
                                dt.Columns[0].ColumnName = "序号";
                                dt.Columns[1].ColumnName = "路径名";
                                dt.Columns[2].ColumnName = "刀号";
                                dt.Columns[3].ColumnName = "刀具";
                                dt.Columns[4].ColumnName = "刀柄";
                                dt.Columns[5].ColumnName = "刀具伸出长度";
                                dt.Columns[6].ColumnName = "直径";
                                dt.Columns[7].ColumnName = "加工时间";
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    if (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7|| i == 8)
                                    {
                                        //dt.Rows.Remove(dt.Rows[0]);
                                    }
                                    else
                                    {


                                        string toolnum = dt.Rows[i]["刀号"].ToString();
                                        double _toolnum = 0;
                                        if (isNumberic(toolnum, out _toolnum))
                                        {
                                            if (!ToolNum.Contains(Convert.ToInt32(dt.Rows[i]["刀号"].ToString())))
                                            {
                                                ToolNum.Add(Convert.ToInt32(dt.Rows[i]["刀号"].ToString()));
                                                ToolInfo tool = new ToolInfo();
                                                tool.PathName = dt.Rows[i]["路径名"].ToString();
                                                string toolno = dt.Rows[i]["刀号"].ToString();
                                                double _toolno = 0;
                                                if (isNumberic(toolno, out _toolno))
                                                {
                                                    tool.ToolNO = Convert.ToInt32(dt.Rows[i]["刀号"].ToString());
                                                }
                                                tool.ToolName = dt.Rows[i]["刀具"].ToString();
                                                string tooll = dt.Rows[i]["刀具伸出长度"].ToString();
                                                double _tooll = 0;
                                                if (isNumberic(tooll, out _tooll))
                                                {
                                                    tool.ToolLength = Convert.ToDouble(dt.Rows[i]["刀具伸出长度"].ToString());
                                                }
                                                string ToolD = dt.Rows[i]["直径"].ToString();
                                                double _ToolD = 0;
                                                if (isNumberic(ToolD, out _ToolD))
                                                {
                                                    tool.ToolDiameter = Convert.ToDouble(dt.Rows[i]["直径"].ToString());
                                                }
                                                tool.Time = dt.Rows[i]["加工时间"].ToString();
                                               
                                                tool.Shank = dt.Rows[i]["刀柄"].ToString();
                                                toolInfos.Add(tool);
                                            }
                                        }
                                    }

                                }
                            }
                            #endregion
                        }
                        else
                        {
                            mytran.Rollback();
                            context.Response.Write("刀具表请输入xls格式文件");
                            return;

                        }

                        var order = entities.JDJS_WMS_Order_Entry_Table.Where(r => r.Order_Number == OrderNum);
                        if (order.Count() > 0)
                        {
                            int orderid = order.First().Order_ID;
                            double pros = 0;
                            if (isNumberic(Process, out pros))
                            {
                                int prose = Convert.ToInt32(Process);
                                var pro = entities.JDJS_WMS_Order_Process_Info_Table.Where(r => r.OrderID == orderid && r.ProcessID == prose);
                                if (pro.Count() > 0)
                                {
                                    ProcessID = pro.First().ID;
                                }
                            }
                        }
                        var toolInfo = entities.JDJS_WMS_Order_Process_Tool_Info_Table.Where(r => r.ProcessID == ProcessID);
                        foreach (var item in toolInfo)
                        {
                            entities.JDJS_WMS_Order_Process_Tool_Info_Table.Remove(item);

                        }
                        entities.SaveChanges();
                        foreach (var item in toolInfos)
                        {


                            JDJS_WMS_Order_Process_Tool_Info_Table tool = new JDJS_WMS_Order_Process_Tool_Info_Table()
                            {
                                ProcessID = ProcessID,
                                PathName = item.PathName,
                                ToolNO = item.ToolNO,
                                ToolName = item.ToolName,
                                ToolLength = item.ToolLength,
                                ToolDiameter = item.ToolDiameter,
                                ToolAroidance = item.ToolAroidance,
                                Shank = item.Shank
                            };
                            entities.JDJS_WMS_Order_Process_Tool_Info_Table.Add(tool);
                        }

                        entities.SaveChanges();
                        mytran.Commit();
                    }
                    catch (Exception ex)
                    {
                        mytran.Rollback();
                        context.Response.Write(ex.Message);
                        return;
                    }
                    context.Response.Write("ok");
                }
            }
        }
        protected static bool isNumberic(string message, out double result)
        {
            //判断是否为整数字符串
            //是的话则将其转换为数字并将其设为out类型的输出值、返回true, 否则为false
            result = -1;   //result 定义为out 用来输出值
            try
            {
                //当数字字符串的为是少于4时，以下三种都可以转换，任选一种
                //如果位数超过4的话，请选用Convert.ToInt32() 和int.Parse()

                //result = int.Parse(message);
                //result = Convert.ToInt16(message);
                result = Convert.ToDouble(message);
                return true;
            }
            catch
            {
                return false;
            }
        }


        public static DataSet getData(string path)

        {

            string fileSuffix = System.IO.Path.GetExtension(path);

            if (string.IsNullOrEmpty(fileSuffix))

                return null;

            using (DataSet ds = new DataSet())

            {

                //判断Excel文件是2003版本还是2007版本

                string connString = "";

                if (fileSuffix == ".xls")

                    connString = "Provider=Microsoft.Jet.OLEDB.4.0;" + "Data Source=" + path + ";" + ";Extended Properties=\"Excel 8.0;HDR=YES;IMEX=1\"";

                else
                    // connString = "Provider=Microsoft.Jet.OLEDB.4.0;" + "Data Source=" + path + ";" + ";Extended Properties=\"Excel 8.0;HDR=YES;IMEX=1\"";
                    connString = "Provider=Microsoft.ACE.OLEDB.12.0;" + "Data Source=" + path + ";" + ";Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"";

                //读取文件

                //string sql_select = "select * from [sheet1$]";
                string tableName;
                using (OleDbConnection conn = new OleDbConnection(connString))
                {

                    //DataTable table = conn.GetOleDbSchemaTable(System.Data.OleDb.OleDbSchemaGuid.Tables, null);
                    //string tableName = table.Rows[0]["Table_Name"].ToString();
                    //string sql_select = "select * from " + "[" + tableName + "]";
                    //string sql_select = "select * from [sheet1$]";



                    conn.Open();

                    DataTable table = conn.GetOleDbSchemaTable(System.Data.OleDb.OleDbSchemaGuid.Tables, null);
                    tableName = table.Rows[0]["Table_Name"].ToString();
                    string strExcel = "select * from " + "[" + tableName + "]";
                    OleDbDataAdapter adapter = new OleDbDataAdapter(strExcel, connString);

                    adapter.Fill(ds, tableName);
                    conn.Close();


                }

                if (ds == null)
                {

                }
                return ds;

            }

        }
        public bool IsReusable
        {
            get
            {
                return false;
            }
        }
    }
    public class ToolInfo
    {
        public string PathName;
        public int ToolNO;
        public string ToolName;
        public string Shank;
        public double ToolLength;
        public double ToolDiameter;
        public double ToolAroidance;
        public string Time;
    }
}