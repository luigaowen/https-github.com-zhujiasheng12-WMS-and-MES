using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace WebApplication2.生产管理.生产部.区域显示
{
    /// <summary>
    /// 区域显示读机床 的摘要说明
    /// </summary>
    public class 区域显示读机床 : IHttpHandler
    {

        public void ProcessRequest(HttpContext context)
        {
          
            {
                int LocationID = int.Parse(context.Request["LocationID"]);
                List<DataList> dataLists = new List<DataList>();
                int RunMachNum = 0;
                int Mach80Num = 0;
                int mach100Num = 0;
                using (JDJS_WMS_DB_USEREntities  wms = new JDJS_WMS_DB_USEREntities ())
                {
                    
                    var devices = wms.JDJS_WMS_Device_Info.Where(r => r.Position == LocationID);
                    foreach (var device in devices)
                    {
                        var state = wms.JDJS_WMS_Device_RealTime_Data.Where(r => r.CncID == device.ID).FirstOrDefault();
                        if (state!= null)
                        {
                            if (state.ProgState == 1)
                            {
                                int cncid = device.ID;
                                var platecnc = wms.JDJS_WMS_Quickchangbaseplate_Table.Where(r => r.CncID == cncid);
                                if (platecnc.Count() > 0)
                                {
                                    RunMachNum++;
                                }
                            }
                        }

                        DataList data = new DataList();
                        data.cncNum = device.MachNum;
                        var processing = wms.JDJS_WMS_Order_Process_Scheduling_Table.Where(r => r.CncID == device.ID && r.isFlag == 2);
                        if (processing.Count() > 0)
                        {
                            int id = Convert.ToInt32(processing.FirstOrDefault().ProcessID);
                            int processNum = Convert.ToInt32(wms.JDJS_WMS_Order_Process_Info_Table.Where(r => r.ID == id).FirstOrDefault().ProcessID);
                            string OrderNum = wms.JDJS_WMS_Order_Entry_Table.Where(r => r.Order_ID == processing.FirstOrDefault().OrderID).FirstOrDefault().Order_Number.ToString();
                            data.doingFileName = OrderNum + "-P" + processNum.ToString();
                            data.doingProcess = OrderNum + "-" + processNum.ToString() + "序";
                            var willdo = wms.JDJS_WMS_Order_Process_Scheduling_Table.Where(r => r.CncID == device.ID && r.ProcessID == processing.FirstOrDefault().ProcessID && r.isFlag == 1);
                            data.surplusNumber = willdo.Count().ToString();
                            {
                                var cncqu = wms.JDJS_WMS_Quickchangbaseplate_Table.Where(r => r.CncID == device.ID);
                                if (cncqu.Count() < 1)
                                {
                                    data.progress = "0.000000";
                                }
                                else
                                {
                                    var cncstate = wms.JDJS_WMS_Device_RealTime_Data.Where(r => r.CncID == device.ID).FirstOrDefault();
                                    if (cncstate != null)
                                    {
                                        int states = Convert.ToInt32(cncstate.ProgState);

                                        if (states == 1)
                                        {
                                            var timestate = wms.JDJS_WMS_Device_Times_Data.Where(r => r.ID == device.ID).FirstOrDefault();
                                            if (timestate != null)
                                            {
                                                double timeMin = Convert.ToDouble(timestate.NowRunTime);
                                                double alltime = Convert.ToDouble(wms.JDJS_WMS_Order_Process_Info_Table.Where(r => r.ID == processing.FirstOrDefault().ProcessID).FirstOrDefault().ProcessTime);
                                                double rate = timeMin / alltime;
                                                if (rate < 0)
                                                {
                                                    data.progress = "0.000000";
                                                }
                                                else if (rate >= 1)
                                                {
                                                    data.progress = "0.999999";
                                                }
                                                else
                                                {
                                                    data.progress = rate.ToString("0.000000");
                                                }

                                            }
                                            else
                                            {
                                                data.progress = "0.000000";
                                            }
                                        }
                                        else
                                        {
                                            DateTime time = Convert.ToDateTime(cncqu.FirstOrDefault().time);
                                            double nowtime = (DateTime.Now - time).TotalMinutes;
                                            var info = wms.JDJS_WMS_Order_Process_Scheduling_Table.Where(r => r.CncID == device.ID && r.isFlag == 3).ToList();
                                            if (info.Count() < 1)
                                            {
                                                data.progress = "0.000000";
                                            }
                                            else
                                            {
                                                var timeInfo = info.OrderByDescending(r => r.EndTime);
                                                DateTime oldTime = Convert.ToDateTime(timeInfo.FirstOrDefault().EndTime);
                                                if (oldTime > time)
                                                {
                                                    data.progress = "1.000000";
                                                }
                                                else
                                                {
                                                    data.progress = "0.000000";
                                                }
                                            }


                                        }

                                    }
                                    else
                                    {
                                        data.progress = "0.000000";
                                    }
                                }
                            }
                            var next = wms.JDJS_WMS_Order_Process_Scheduling_Table.Where(r => r.CncID == device.ID && r.isFlag == 1).OrderBy(r => r.StartTime);
                            if (next.Count() > 0)
                            {
                                int ids = Convert.ToInt32(next.FirstOrDefault().ProcessID);
                                int processNums = Convert.ToInt32(wms.JDJS_WMS_Order_Process_Info_Table.Where(r => r.ID == ids).FirstOrDefault().ProcessID);
                                string OrderNums = wms.JDJS_WMS_Order_Entry_Table.Where(r => r.Order_ID == next.FirstOrDefault().OrderID).FirstOrDefault().Order_Number.ToString();
                                data.waitingFileName = OrderNums + "-P" + processNums.ToString();
                            }
                            var nextTask = wms.JDJS_WMS_Order_Process_Scheduling_Table.Where(r => r.CncID == device.ID && r.isFlag == 1 && r.ProcessID != processing.FirstOrDefault().ProcessID).OrderBy(r => r.StartTime);
                            if (nextTask.Count() > 0)
                            {
                                int ids = Convert.ToInt32(nextTask.FirstOrDefault().ProcessID);
                                int processNums = Convert.ToInt32(wms.JDJS_WMS_Order_Process_Info_Table.Where(r => r.ID == ids).FirstOrDefault().ProcessID);
                                string OrderNums = wms.JDJS_WMS_Order_Entry_Table.Where(r => r.Order_ID == nextTask.FirstOrDefault().OrderID).FirstOrDefault().Order_Number.ToString();
                                data.waitingProcess = OrderNums + "-" + processNums.ToString() + "序";
                            }
                        }
                        else
                        {
                            processing = wms.JDJS_WMS_Order_Process_Scheduling_Table.Where(r => r.CncID == device.ID && r.isFlag == 1).OrderBy(r => r.StartTime);
                            if (processing.Count() > 0)
                            {
                                if (processing.Count() > 1)
                                {
                                    var pro = processing.ToList();
                                    int id = Convert.ToInt32(processing.FirstOrDefault().ProcessID);
                                    int processNum = Convert.ToInt32(wms.JDJS_WMS_Order_Process_Info_Table.Where(r => r.ID == id).FirstOrDefault().ProcessID);
                                    string OrderNum = wms.JDJS_WMS_Order_Entry_Table.Where(r => r.Order_ID == processing.FirstOrDefault().OrderID).FirstOrDefault().Order_Number.ToString();
                                    data.doingFileName = OrderNum + "-P" + processNum.ToString();
                                    data.doingProcess = OrderNum + "-" + processNum.ToString() + "序";
                                    var willdo = wms.JDJS_WMS_Order_Process_Scheduling_Table.Where(r => r.CncID == device.ID && r.ProcessID == processing.FirstOrDefault().ProcessID && r.isFlag == 1);
                                    data.surplusNumber = willdo.Count().ToString();
                                    {
                                        var cncqu = wms.JDJS_WMS_Quickchangbaseplate_Table.Where(r => r.CncID == device.ID);
                                        if (cncqu.Count() < 1)
                                        {
                                            data.progress = "0.000000";
                                        }
                                        else
                                        {
                                            var cncstate = wms.JDJS_WMS_Device_RealTime_Data.Where(r => r.CncID == device.ID).FirstOrDefault();
                                            if (cncstate != null)
                                            {
                                                int states = Convert.ToInt32(cncstate.ProgState);

                                                if (states == 1)
                                                {
                                                    var timestate = wms.JDJS_WMS_Device_Times_Data.Where(r => r.ID == device.ID).FirstOrDefault();
                                                    if (timestate != null)
                                                    {
                                                        double timeMin = Convert.ToDouble(timestate.NowRunTime);
                                                        double alltime = Convert.ToDouble(wms.JDJS_WMS_Order_Process_Info_Table.Where(r => r.ID == processing.FirstOrDefault().ProcessID).FirstOrDefault().ProcessTime);
                                                        double rate = timeMin / alltime;
                                                        if (rate < 0)
                                                        {
                                                            data.progress = "0.000000";
                                                        }
                                                        else if (rate >= 1)
                                                        {
                                                            data.progress = "0.999999";
                                                        }
                                                        else
                                                        {
                                                            data.progress = rate.ToString("0.000000");
                                                        }

                                                    }
                                                    else
                                                    {
                                                        data.progress = "0.000000";
                                                    }
                                                }
                                                else
                                                {
                                                    DateTime time = Convert.ToDateTime(cncqu.FirstOrDefault().time);
                                                    double nowtime = (DateTime.Now - time).TotalMinutes;
                                                    var info = wms.JDJS_WMS_Order_Process_Scheduling_Table.Where(r => r.CncID == device.ID && r.isFlag == 3).ToList();
                                                    if (info.Count() < 1)
                                                    {
                                                        data.progress = "0.000000";
                                                    }
                                                    else
                                                    {
                                                        var timeInfo = info.OrderByDescending(r => r.EndTime);
                                                        DateTime oldTime = Convert.ToDateTime(timeInfo.FirstOrDefault().EndTime);
                                                        if (oldTime > time)
                                                        {
                                                            data.progress = "1.000000";
                                                        }
                                                        else
                                                        {
                                                            data.progress = "0.000000";
                                                        }
                                                    }


                                                }

                                            }
                                            else
                                            {
                                                data.progress = "0.000000";
                                            }
                                        }
                                    }

                                    int ids = Convert.ToInt32(pro[1].ProcessID);
                                    int processNums = Convert.ToInt32(wms.JDJS_WMS_Order_Process_Info_Table.Where(r => r.ID == ids).FirstOrDefault().ProcessID);
                                    int idsss = Convert.ToInt32(pro[1].OrderID);
                                    string OrderNums = wms.JDJS_WMS_Order_Entry_Table.Where(r => r.Order_ID == idsss).FirstOrDefault().Order_Number.ToString();
                                    data.waitingFileName = OrderNums + "-P" + processNums.ToString();

                                    var nextTask = wms.JDJS_WMS_Order_Process_Scheduling_Table.Where(r => r.CncID == device.ID && r.isFlag == 1 && r.ProcessID != ids).OrderBy(r => r.StartTime);
                                    if (nextTask.Count() > 0)
                                    {
                                        int idss = Convert.ToInt32(nextTask.FirstOrDefault().ProcessID);
                                        int processNumss = Convert.ToInt32(wms.JDJS_WMS_Order_Process_Info_Table.Where(r => r.ID == idss).FirstOrDefault().ProcessID);
                                        string OrderNumss = wms.JDJS_WMS_Order_Entry_Table.Where(r => r.Order_ID == nextTask.FirstOrDefault().OrderID).FirstOrDefault().Order_Number.ToString();
                                        data.waitingProcess = OrderNumss + "-" + processNumss.ToString() + "序";
                                    }
                                }
                                else
                                {
                                    int id = Convert.ToInt32(processing.FirstOrDefault().ProcessID);
                                    int processNum = Convert.ToInt32(wms.JDJS_WMS_Order_Process_Info_Table.Where(r => r.ID == id).FirstOrDefault().ProcessID);
                                    string OrderNum = wms.JDJS_WMS_Order_Entry_Table.Where(r => r.Order_ID == processing.FirstOrDefault().OrderID).FirstOrDefault().Order_Number.ToString();
                                    data.doingFileName = OrderNum + "-P" + processNum.ToString();
                                    data.doingProcess = OrderNum + "-" + processNum.ToString() + "序";
                                    var willdo = wms.JDJS_WMS_Order_Process_Scheduling_Table.Where(r => r.CncID == device.ID && r.ProcessID == processing.FirstOrDefault().ProcessID && r.isFlag == 1);
                                    data.surplusNumber = willdo.Count().ToString();
                                    {
                                        var cncqu = wms.JDJS_WMS_Quickchangbaseplate_Table.Where(r => r.CncID == device.ID);
                                        if (cncqu.Count() < 1)
                                        {
                                            data.progress = "0.000000";
                                        }
                                        else
                                        {
                                            var cncstate = wms.JDJS_WMS_Device_RealTime_Data.Where(r => r.CncID == device.ID).FirstOrDefault();
                                            if (cncstate != null)
                                            {
                                                int states = Convert.ToInt32(cncstate.ProgState);

                                                if (states == 1)
                                                {
                                                    var timestate = wms.JDJS_WMS_Device_Times_Data.Where(r => r.ID == device.ID).FirstOrDefault();
                                                    if (timestate != null)
                                                    {
                                                        double timeMin = Convert.ToDouble(timestate.NowRunTime);
                                                        double alltime = Convert.ToDouble(wms.JDJS_WMS_Order_Process_Info_Table.Where(r => r.ID == processing.FirstOrDefault().ProcessID).FirstOrDefault().ProcessTime);
                                                        double rate = timeMin / alltime;
                                                        if (rate < 0)
                                                        {
                                                            data.progress = "0.000000";
                                                        }
                                                        else if (rate >= 1)
                                                        {
                                                            data.progress = "0.999999";
                                                        }
                                                        else
                                                        {
                                                            data.progress = rate.ToString("0.000000");
                                                        }

                                                    }
                                                    else
                                                    {
                                                        data.progress = "0.000000";
                                                    }
                                                }
                                                else
                                                {
                                                    DateTime time = Convert.ToDateTime(cncqu.FirstOrDefault().time);
                                                    double nowtime = (DateTime.Now - time).TotalMinutes;
                                                    var info = wms.JDJS_WMS_Order_Process_Scheduling_Table.Where(r => r.CncID == device.ID && r.isFlag == 3).ToList();
                                                    if (info.Count() < 1)
                                                    {
                                                        data.progress = "0.000000";
                                                    }
                                                    else
                                                    {
                                                        var timeInfo = info.OrderByDescending(r => r.EndTime);
                                                        DateTime oldTime = Convert.ToDateTime(timeInfo.FirstOrDefault().EndTime);
                                                        if (oldTime > time)
                                                        {
                                                            data.progress = "1.000000";
                                                        }
                                                        else
                                                        {
                                                            data.progress = "0.000000";
                                                        }
                                                    }


                                                }

                                            }
                                            else
                                            {
                                                data.progress = "0.000000";
                                            }
                                        }
                                    }

                                }
                            }
                        }
                        if (Convert.ToDouble(data.progress) >= 1)
                        {
                            mach100Num++;
                        }
                        else if (0.8 <= Convert.ToDouble(data.progress)&& Convert.ToDouble(data.progress) < 1)
                        {
                            Mach80Num++;
                        }
                        dataLists.Add(data);
                    }
                    foreach (var item in dataLists)
                    {
                        item.mach100Num = mach100Num.ToString();
                        item.Mach80Num = Mach80Num.ToString();
                        item.RunMachNum = RunMachNum.ToString();
                    }
                    var lists = dataLists.OrderByDescending(r => r.progress);
                    System.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
                    var page = int.Parse(context.Request["page"]);
                    var limit = int.Parse(context.Request["limit"]);
                    var layPage = lists.Skip((page - 1) * limit).Take(limit);
                    var model = new { code = 0, data = layPage,count=lists.Count() };
                    var json = serializer.Serialize(model);
                    context.Response.Write(json);
                }
                
            }

        }

        public bool IsReusable
        {
            get
            {
                return false;
            }
        }
    }
    class DataList
    {/// <summary>
    /// 机床编号
    /// </summary>
        public string cncNum;
        /// <summary>
        /// 正在进行订单及工序
        /// </summary>
        public string doingProcess;
        /// <summary>
        /// 等待加工订单及工序
        /// </summary>
        public string waitingProcess;
        /// <summary>
        /// 机台当前订单剩余量
        /// </summary>
        public string surplusNumber;
        /// <summary>
        /// 正在加工文件名
        /// </summary>
        public string doingFileName;
        /// <summary>
        /// 等待加工文件名
        /// </summary>
        public string waitingFileName;
        /// <summary>
        /// 当前任务完成进度
        /// </summary>
        public string progress;
        public string RunMachNum;
        public string Mach80Num;
        public string mach100Num;
    }
}